<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于vue的event bus遇到的坑]]></title>
    <url>%2Fposts%2F17742746%2F</url>
    <content type="text"><![CDATA[记录一个在工作中实际遇到的问题。问题描述：昨天遇到了一个奇怪的问题，自己写的复制粘贴功能，竟然黏贴多次。复现步骤：打开报表设计，然后进入订单打印一次，再回到报表设计此时进行复制黏贴就会出现黏贴多次。根据自己猜测，可能是什么元素影响了点击事件导致了触发了两次。于是进行试验：通过在对象的代码位置加上输出日志，发现实际只触发了一次事件，但是bus的$on的处理函数却执行了两次。于是排除了点击事件的原因，这时候需要靠google进行搜索，发现是vue的event总线的锅，其实也是自己的锅，由于event bus是全局的，不会随着组件的销毁而自动销毁组件上监听的事件，这也就说明了为什么在设计时不会出现这样的状况，需要进行打印后重新打开设计页面才会出现这个bug，所以在重新打开设计窗口则导致了$on重新注册了一次，那一旦去触发便会多个都响应了。解决办法就是在组件beforeDestroy生命周期中使用$off对这些事件进行移除。更具体解释可以参考我google到的一篇文章：参考文章]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>bus</tag>
        <tag>$off</tag>
        <tag>多次触发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于代码压缩和取类名遇到的坑]]></title>
    <url>%2Fposts%2F687892f6%2F</url>
    <content type="text"><![CDATA[记录一个在工作中实际遇到的问题。问题描述：昨天被报告了我报表项目新建的模版无法显示且报错了。检查了一下发现控件类型全部错误，且被修改为’t’。这个让我有点懵了，不知道为什么。检查自己代码，没有发现这个修改的字眼，询问同事是否有修改过代码或者传进来的模版是否有自己添加了其他内容。都没有。重新编译部署，问题仍在。本地测试却没有问题。直到今天加入日志打印，在线上环境调试，于是发现了问题所在。错误所在：如图1，在注册控件的时是没有问题的，所传入参数都是正常，但是在生成完实例之后，每一个实例的类型都为’t’如图2，实例展开时候，显示实例类型为’t’，’type’字段也为’t’。于是发现问题就在此，因为我的’type’字段使用的是1this.type = this[&quot;constructor&quot;][&quot;name&quot;];直接取当前类名作为’type’字段的值，但是因为通过webpack打包后，代码被压缩了，类名被压缩，此时再去取类名作为’type’字段的值就出错了。解决：在基类将’type’设为抽象属性abstract，所有派生类全部重写’type’，直接写死内容.因为这个字段是不能被修改的，所以写死不会影响后续。]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>代码压缩</tag>
        <tag>类名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON序列化遇到循环引用的问题]]></title>
    <url>%2Fposts%2F8105%2F</url>
    <content type="text"><![CDATA[记录一个在工作中实际遇到的问题。需求描述：有许多要序列化的对象，对象中有个字段引用了其他对象或者被其他对象引用了。在序列化之前已经先通过装饰器进行标记，将那个字段给去除不参与序列化。结果描述：进行1JSON.stringify(obj);提示1&quot;TypeError: Converting circular structure to JSON&quot;；思考经过搜索，此错误是由于循环引用产生的，但是原因何在？里面应该已经不存在循环引用的内容了，因为已经通过装饰器的去除了，并且再检查了一遍装饰器是正常工作的。解决打开控制台进行调试，将断点设置在未去除字段之前，内容看图：多出了一个莫名其妙的 “__ob__“ 的字段。再往深处查原来的对象,内容看图：“__ob__“存在在这个对象里面，还是个Observer，经过思考和搜索，确定了这个原因是Vue自己给我加进去的，想起之前Vue的data里面的对象都会被强行插入set和get方法。原因就大致懂了，因为这边的对象通过Vue的bus进行传输过，应该是在这个过程中被插入的。知道问题所在，解决就简单了，将这个字段去除后再进行序列化就没问题了。这个坑虽然没有多大难度，只要深入调试一下必定可以发现的这个字段，主要是思考为什么会出现这个字段才是比较重要的。]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>JSON</tag>
        <tag>stringify</tag>
        <tag>循环引用</tag>
      </tags>
  </entry>
</search>
